Modellerin Doğrulanması ve FluentValidation Kütüphanesi
Uygulama geliştirirken en zor noktalardan birisi sistemi kararlı yapıda tutmaktır.
Bunu yapmanın yolu validasyonlardan geçer.

Peki yazılım geliştirirken validasyon yapmak ne demek? Şöyle düşünün bir post endpoint'iniz var.(Veritabanına kitap eklediğinizi düşünün)
Input olarak aldığı obje(kitap) içerisinde de integer bir özellik olsun(GenreId) ve bu özelliğin mantıksal olarak 0 olmaması gerekiyor ya ada boş geçilmemesi gerekiyor.
Eğer servisiniz bu özelliği kontrol etmeden db'ye yazarsa, database'in hata fırlatmasına ve uygulamanızın çalışma anında kırılmasına neden olur.
Daha da kötüsü, kırılmadan devam edebilir ve data bütünlüğünün bozulmasına, gürültü veri oluşmasına neden olabilir.

Bir validasyon yapısı kurmak hem kuralların okunabilirliği hem de kuralların esnetilebilir olması açısından çok önemlidir.
Bu amaçla yaratılmış bir çok açık kaynaklı kütüphane bulunur.

.Net uygulamaları için en çok kullanılan validation kütüphanesi ise FluentValidation'dır.

FluentValidation'ı kullanabilmiz için öncelikle kütüphaneyi paket olarak uygulamamıza eklememiz gerekir.

Aşağıdaki gibi bir Müşteri modelimizin olduğunu varsayalım:
public class Customer {
    public int Id { get; set; }
    public string Surname { get; set; }
    public string Forename { get; set; } // Ön ad
    public decimal Discount { get; set; } // İskonto
    public string Address { get; set; }
}

Müşteri modelinin özelliklerini doğrulamak istersek aşağıdaki gibi bir validasyon sınıfı oluşturmamız gerekir:

using FluentValidation;
public class CustomerValidator: AbstractValidator<Customer> { 
// FluentValidation kütüphanesinin AbstractValidator sınıfını kalıtım alarak Customer sınıfını doğrulayacağını FluentValidation'a bildirir
}

Şimdi müşterinin özelliklerini bir takım kurallar ile sınırlayalım:
using FluentValidation;

public class CustomerValidator : AbstractValidator<Customer> {
    public CustomerValidator() {
        RuleFor(customer => customer.Surname).NotNull();
        RuleFor(customer => customer.Discount).GreaterThan(0);
    }
}
Yukarıdaki 2 kuralı incelersek: Soyad null olamaz, İskonto 0'dan büyük olmak zorundadır.

Peki bu validasyonu nasıl çalıştırırız?
Customer customer = new Customer();
CustomerValidator validator = new CustomerValidator();

ValidationResult results = validator.Validate(customer);

if(!results.IsValid) { // False
    foreach(var failure in results.Errors) {
        Console.WriteLine("Property " + failure.PropertyName + " failed validation. Error was: " + failure.ErrorMessage);
    }
}

Validasyon sınıfının bir nesnesi oluşturup Validate() metodunu çağırırsak geriye validasyon sonuçları döner.
result objesi içerisinde IsValid özelliği validasyon sonucunda hata olup olmadığını geri döner.
Ayrıca result objesi Errors adında bir de hata mesajlarını barındıran bir dizi bulundurur.
foreach döngüsü yardımıyla bu hata mesajlarını istediğimiz gibi kullanabiliriz.
Yukarıdaki örnek içerisinden Console'a yazdırdık. Burda bir log altyapısı varsa loglama yapılabilir yada son kullanıcıya geri döndürülebilir.

Peki eğer bir model validasyondan geçmezse hata fırlatmasını istiyorsak?
FluentValidation Kütüphanesi ValidateAndThrow adında bir metot barındırır. Bu metot önce kontrolleri yapar, eğer hata varsa hata mesajlarını fırlatır.

Customer customer = new Customer();
CustomerValidator validator = new CustomerValidator();
validator.ValidateAndThrow(customer);

Throw edilen bu hata mesajlarını try catch blokları ile yakalayıp istediğimiz gibi yönetebiliriz. 
Istersek loga yazarız, istersek son kullanıcıya hata mesajı olarak dönebiliriz.