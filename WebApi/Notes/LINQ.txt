LINQ (Language Integrated Query)
LINQ .Net Framework 3.5 ve Visual Studio 2008 ile hayatýmýza giren farklý data source yani veri kaynaklarýný sorgulamamýza yarayan bir dildir.
LINQ Visual Basic ve C# ile birlikte kullanýlabilir.
Linq IQuerayable sýnýflar ve IQuerayable'dan türeyen sýnýflarla birlikte kullanýlabilir.
EF Core ile yarattýðýmýz Context'in elemanlarý yani tablolarýn koddaki karþýklýklarý DBSet tipindedir.
DBSet de IQuerayable sýnýfýndan türeyen bir sýnýftýr.
Dolayýsýyla LINQ kullanýlarak DBSet'ler üzerinde sorgulama yapýlabilir.

Baþlýca önemli LINQ metotlarý þu þekilde:
First() -- FirstOrDefault()
Find()
Single() -- SingleOrDefault()
ToList()
Count()
Min() -- Max()
Last() -- LastOrDefault()
Average()

Find()
Ýlgili DbSet üzerinden Primary Key olarak tanýmlanan alana göre arama yapmak için kullanýlýr.
using (var ctx = new BookStoreDbContext())
{
    var book = ctx.Books.Find(id);
}

First/FirstOrDefault()
First ve FirstOrDefault birden fazla verinin olabileceði sorgulamalarýn sonunda listedeki ilk elemaný seçmek için kullanýlýr.
using (var ctx = new BookStoreDbContext())
{
    var books = ctx.Books.Where(s => s.Title == "Herland").FirstOrDefault<Book>();
}

Önemli: First() ve FirstOrDefault() arasýndaki temel fark; eðer listede veri bulunamazsa First() hata fýrlatýrken, FirstOrDefault() 
geriye null döndürür. Bu nedenle FirstOrDefault() ile veriyi çekip daha sonradan verinin null olup olmadýðýný kontrol etmek 
daha doðru bir yaklaþým olur.

SingleOrDefault()
Sorgulama sonunda kalan tek veriyi geri döndürür.
Eðer listede birden fazla eleman varsa hata döndürür.
Listede hiç eleman yoksa geriye null döndürür.
using (var ctx = new BookStoreDbContext())
{
    var books = ctx.Books.Where(s => s.Title == "Herland").SingleOrDefault<Book>();
}

ToList()
Sorgulama sonucunu geriye koleksiyon olarak döndürmek için kullanýlýr.
using (var ctx = new BookStoreDbContext())
{
    var bookList = ctx.Books.Where(s => s.GenreId == 2).ToList();
}

OrderBy/OrderByDescending()
OrderBy() bir listeyi sýralamak için kullanýlýr.
OrderBy() varsayýlan olarak Ascending sýralama sunar.
Tersi sýralamak için OrderByDescending() kullnaýlmalýdýr.
using (var ctx = new BookStoreDbContext())
{
    var books = ctx.Books.OrderBy(s => s.Title).ToList();
    // or descending order
    var  descBooks = ctx.Books.OrderByDescending(s => s.Title).ToList();
}

GroupBy()
Belirli bir alana göre verileri gruplamak için kullanýlýr.
using (var ctx = new BookStoreDbContext())
{
    var books = ctx.Books.GroupBy(s => s.GenreId);
    foreach (var groupItem in books)
    {
        Console.WriteLine(groupItem.Key);
        foreach (var book in groupItem)
        {
            Console.WriteLine(book.GenreId);
        }
    }
}

Parameterized Query
LINQ içerisinde parametreleri kullanabiliriz.
using (var ctx = new BookStoreDbContext())
{
    string title = "Herland";
    var book = ctx.Books.Where(s => s.Title == name).FirstOrDefault<Book>();
}

Anonymous Object Result
LINQ her zaman geriye entity objesi dönmek zorunda deðildir. Query sonucunu kendi yarattýðýnýz bir obje formatýnda döndürebilirsiniz.
using (var ctx = new BookStoreDbContext())
{
    var anonymousObjResult = ctx.Books.Where(b => b.GenreId == 2)
                                .Select(b => 
                                new {
                                       Id = b.Id,
                                       BookName = b.Title 
                                    });
    foreach (var obj in anonymousObjResult)
    {
        Console.Write(obj.Name);
    }
}